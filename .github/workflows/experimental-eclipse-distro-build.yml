name: Eclipse Distro STS Build (GitHub Hosted)

on:
  workflow_dispatch:
    inputs:
      eclipse_profile:
        description: Eclipse profile 'e428' etc
        required: true
        default: 'e428'
        type: string
      build_type:
        description: Build type such as 'snapshot', 'milestone' or 'release'
        required: true
        default: 'snapshot'
        type: string
      ref:
        description: Git branch, tag, commit hash
        required: false
        default: 'main'
        type: string

jobs:

  eclipse-distro-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          ref: ${{ inputs.ref }}
      - name: Set up JDK 17
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Enforce https instead of http
        run: ./nohttp.sh
      - name: Install GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > gpg.asc
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --import gpg.asc
      - name: Create Keychain. Add Mac App Dev Certificate to Keychain
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN
          security set-keychain-settings -lut 21600 $KEYCHAIN
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN
          security list-keychain -d user -s $KEYCHAIN
      - name: Unlock Keychain for OSX signing
        run: |
          security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $RUNNER_TEMP/app-signing.keychain-db
      - name: Install appdmg
        run: |
          npm install -g appdmg
      - name: Create Temp Directory Structure for Notarization Service
        run: |
          cd /tmp
          mkdir -p macos-notarization-service/pending-files
      - name: Build Eclipse Distro
        env:
          tools_s3_access_key: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          tools_s3_secret_key: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          gpg_keyname: ${{ secrets.GPG_KEYID }}
          MACOS_CERTIFICATE_ID: ${{ secrets.MACOS_CERTIFICATE_ID }}
          MACOS_NOTARIZATION_SERVICE_URL: http://localhost:8080
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd eclipse-distribution
          KEYCHAIN=$RUNNER_TEMP/app-signing.keychain-db
          ./mvnw --batch-mode -U clean install -P${{ inputs.eclipse_profile }} -P${{ inputs.build_type }} -Pgitactions -Pgpg.sign -Dsigning.skip=true -Dmaven.repo.local=~/.m2/repository-signed -Dhttpclient.retry-max=20 -Dmaven.test.skip=true -Declipse.p2.mirrors=false -Dtycho.localArtifacts=ignore -Ds3service.https-only=true -Dp2.replaceQualifier=true -Dorg.eclipse.ecf.provider.filetransfer.httpclient.retrieve.readTimeout=1200000 -Dorg.eclipse.equinox.p2.transport.ecf.retry=5 -Dskip.eclipserun.proxies=false -Dskip.osx.signing=true  -Dskip.win.signing=true -Dskip.osx.notarizing=true -Dtycho.equinox.resolver.uses=true
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: win-zips-${{ github.run_id }}.${{ github.run_attempt }}
          path: ${{ github.workspace }}/eclipse-distribution/org.springframework.boot.ide.product.${{ inputs.eclipse_profile }}/target/products/*.win32.*.zip
          retention-days: 1


  sign-win-executable:
    needs: eclipse-distro-build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            .github
      - uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281
        with:
          name: win-zips-${{ github.run_id }}.${{ github.run_attempt }}
      - name: Sign EXE within zip files
        id: sign
        env:
          SSH_KEY: ~/.ssh/id_rsa
          SSH_USER: signer
        run: |
          workdir=`pwd`
          files=`ls *.zip`
          for file in $files
          do
            ./.github/scripts/sign-exe-in-zip-file.sh $file
          done
      - name: Update S3
        id: update-s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
        run: |
          distro_target=${{ inputs.eclipse_profile }}
          distro_target="${distro_target:0:2}.${distro_target:2}
          ls spring-tool-suite-4*.zip*
          echo "aws s3 sync rm spring-tool-suite-4*.zip* s3://dist.springsource.com/snapshot/STS4/nightly/dist/${distro_target}"
          echo "aws s3 sync cp spring-tool-suite-4*.zip* s3://dist.springsource.com/snapshot/STS4/nightly/dist/${distro_target}"
          ls spring-tool-suite-4*.jar*
          echo "aws s3 sync rm spring-tool-suite-4*.jar* s3://dist.springsource.com/snapshot/STS4/nightly/dist/${distro_target}"
          echo "aws s3 sync cp spring-tool-suite-4*.jar* s3://dist.springsource.com/snapshot/STS4/nightly/dist/${distro_target}"

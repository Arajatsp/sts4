name: Eclipse Distro STS Build (GitHub Hosted)

on:
  workflow_call:
    inputs:
      eclipse_profile:
        description: Eclipse profile 'e428' etc
        required: true
        default: 'e428'
        type: string
      build_type:
        description: Build type such as 'snapshot', 'milestone' or 'release'
        required: true
        default: 'snapshot'
        type: string
      ref:
        description: Git branch, tag, commit hash
        required: false
        default: 'main'
        type: string

jobs:

  eclipse-distro-build:
    runs-on: macos-latest-xl
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          ref: ${{ inputs.ref }}
          sparse-checkout: |
            eclipse-distribution
            eclipse-extensions
      - name: Set up JDK 17
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Enforce https instead of http
        run: ./nohttp.sh
      - name: Install GPG key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > gpg.asc
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --import gpg.asc
      - name: Build Eclipse Distro
        env:
          tools_s3_access_key: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          tools_s3_secret_key: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          gpg_keyname: ${{ secrets.GPG_KEYID }}
        run: |
          cd eclipse-distribution
          ./mvnw --batch-mode -U clean deploy -P${{ inputs.eclipse_profile }} -P${{ inputs.build_type }} -Pgitactions -Pgpg.sign -Dsigning.skip=true -Dmaven.repo.local=~/.m2/repository-signed -Dhttpclient.retry-max=20 -Dmaven.test.skip=true -Declipse.p2.mirrors=false -Dtycho.localArtifacts=ignore -Ds3service.https-only=true -Dp2.replaceQualifier=true -Dorg.eclipse.ecf.provider.filetransfer.httpclient.retrieve.readTimeout=1200000 -Dorg.eclipse.equinox.p2.transport.ecf.retry=5 -Dskip.eclipserun.proxies=false -Dskip.osx.signing=true  -Dskip.win.signing=true -Dskip.osx.notarizing=true -Dtycho.equinox.resolver.uses=true
      - name: Upload Linux Distro Build Artifacts
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          cd eclipse-distribution/org.springframework.boot.ide.product.${{ inputs.eclipse_profile }}/target/products
          files=`ls spring-tool-suite-4*linux*.tar.gz`
          for file in $files
          do
            echo "Generate checksums for ${file}"
            shasum -a 256 $file > ${file}.sha256
            md5 $file > ${file}.md5
          done
          echo "Processing S3 update..."
          ls spring-tool-suite-4*linux*.tar.gz*
          dist_path=`cat ${{ github.workspace }}/eclipse-distribution/org.springframework.boot.ide.product.${{ inputs.eclipse_profile }}/target/s3-dist-path.txt`
          echo "Removing old Linux .tar.gz files from s3..."
          aws s3 rm s3://dist.springsource.com/${dist_path} --recursive --exclude "*" --include "spring-tool-suite-4*linux*.tar.gz*" --exclude "*/*"
          echo "Uploading new Linux .ta.gz files to s3..."
          aws s3 cp . s3://dist.springsource.com/${dist_path} --recursive --exclude "*" --include "spring-tool-suite-4*linux*.tar.gz*" --exclude "*/*" --acl public-read --no-progress
      - name: Upload Build Artifacts for Signing
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
        run: |
          echo "Uploading Win Zips and OSX tar.gz to S3 for signing..."
          aws s3 cp ${{ github.workspace }}/eclipse-distribution/org.springframework.boot.ide.product.${{ inputs.eclipse_profile }}/target/products s3://dist.springsource.com/sts4-distro-ci-temp/${{ github.run_id }} --recursive --exclude "*" --include "spring-tool-suite-4*win*.zip" --include "spring-tool-suite-4*macosx*.tar.gz" --exclude "*/*" --no-progress
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: s3-dist-path-${{ github.run_id }}.${{ github.run_attempt }}
          path: ${{ github.workspace }}/eclipse-distribution/org.springframework.boot.ide.product.${{ inputs.eclipse_profile }}/target/s3-dist-path.txt
          retention-days: 1


  sign-win-distros:
    needs: eclipse-distro-build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          sparse-checkout: |
            .github
      - name: Download Win Zips from S3 for Signing
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
        run: |
          rm -f spring-tool-suite-4*win*.zip*
          rm -f spring-tool-suite-4*win*.self-extracting.jar*
          ls
          aws s3 mv s3://dist.springsource.com/sts4-distro-ci-temp/${{ github.run_id }} . --recursive --exclude "*" --include "spring-tool-suite-4*win*.zip*" --exclude "*/*" --no-progress
      - name: Sign EXE within zip files
        id: sign
        env:
          SSH_KEY: ~/.ssh/id_rsa
          SSH_USER: signer
        run: |
          files=`ls spring-tool-suite-4*win*.zip`
          for file in $files
          do
            ${{ github.workspace }}/.github/scripts/sign-exe-in-zip-file.sh $file ${{ github.workspace }}/.github/scripts/sign-exe.sh ${{ github.workspace }}/.github/scripts/self-extracting-jar-creator.jar ${{ github.run_id }}
          done
      - uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281
        with:
          name: s3-dist-path-${{ github.run_id }}.${{ github.run_attempt }}
      - name: Update Win zip/jar on S3
        id: update-s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
        run: |
          dist_path=`cat s3-dist-path.txt`
          echo "Processing S3 update..."
          ls spring-tool-suite-4*win*.zip*
          ls spring-tool-suite-4*win*.self-extracting.jar*
          echo "Removing old win zip and self extracting jar files from s3..."
          aws s3 rm s3://dist.springsource.com/${dist_path} --recursive --exclude "*" --include "spring-tool-suite-4*win*.zip*" --include "spring-tool-suite-4*win*.self-extracting.jar*" --exclude "*/*"
          echo "Uploading new win zip and self extracting jar files to s3..."
          aws s3 mv . s3://dist.springsource.com/${dist_path} --recursive --exclude "*" --include "spring-tool-suite-4*win*.zip*" --include "spring-tool-suite-4*win*.self-extracting.jar*" --exclude "*/*" --acl public-read --no-progress

  sign-osx-distros:
    needs: eclipse-distro-build
    runs-on: macos-latest-xl
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          sparse-checkout: |
            .github
      - name: Create Keychain. Add Mac App Dev Certificate to Keychain
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12          
          KEYCHAIN=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN
          security set-keychain-settings -lut 21600 $KEYCHAIN
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN
          security list-keychain -d user -s $KEYCHAIN
      - name: Unlock Keychain for OSX signing
        run: |
          security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} $RUNNER_TEMP/app-signing.keychain-db
      - name: Install appdmg
        run: |
          npm install -g appdmg
      - name: Download OSX tar.gz files from S3 for Signing/Notarization
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
        run: |
          rm -rf *macosx*
          ls
          aws s3 mv s3://dist.springsource.com/sts4-distro-ci-temp/${{ github.run_id }} . --recursive --exclude "*" --include "spring-tool-suite-4*macosx*.tar.gz" --exclude "*/*" --no-progress
      - name: Sign .app, Create and Sign DMG
        env:
          MACOS_CERTIFICATE_ID: ${{ secrets.MACOS_CERTIFICATE_ID }}
          NOTARIZE_PROFILE: notarize-app-dmg-profile
        run: |
          export KEYCHAIN=$RUNNER_TEMP/app-signing.keychain-db
          ls ${{ github.workspace }}/.github/assets
          files=`ls spring-tool-suite-4*macosx*.tar.gz`
          for file in $files
          do
            ${{ github.workspace }}/.github/scripts/sign-osx-distro-file.sh $file ${{ github.workspace }}/.github/assets/entitlements.plist ${{ github.workspace }}/.github/assets/sts4.icns
          done
      - name: Notarize DMG files
        env:
          NOTARIZE_PROFILE: notarize-app-dmg-profile
        run: |
          xcrun notarytool store-credentials $NOTARIZE_PROFILE --apple-id ${{ secrets.AC_USERNAME }} --team-id ${{ secrets.APPLE_TEAM_ID }} --password ${{ secrets.AC_PASSWORD }}
          dmg_files=`ls spring-tool-suite-4*macosx*.dmg`
          for dmg_file in $dmg_files
          do
            ${{ github.workspace }}/.github/scripts/notarize-osx-distro-file.sh $dmg_file $NOTARIZE_PROFILE &
          done
          wait
          echo "Done signing and notarization of DMG files"
      - uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281
        with:
          name: s3-dist-path-${{ github.run_id }}.${{ github.run_attempt }}
      - name: Update Win zip/jar on S3
        id: update-s3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
        run: |
          dist_path=`cat s3-dist-path.txt`
          echo "Processing S3 update..."
          ls spring-tool-suite-4*macosx*.dmg*
          echo "Removing old dmg files from s3..."
          aws s3 rm s3://dist.springsource.com/${dist_path} --recursive --exclude "*" --include "spring-tool-suite-4*macosx*.dmg*" --exclude "*/*"
          echo "Uploading new dmg files to s3..."
          aws s3 mv . s3://dist.springsource.com/${dist_path} --recursive --exclude "*" --include "spring-tool-suite-4*macosx*.dmg*" --exclude "*/*" --acl public-read --no-progress

  cleanup:
    needs: [ sign-win-distros, sign-osx-distros ]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Remove Temp Build Artifacts from S3
        id: cleanup-s3-temp-storage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws s3 rm s3://dist.springsource.com/sts4-distro-ci-temp --recursive --exclude "*" --include "${{ github.run_id }}/*"
      - uses: actions/download-artifact@cbed621e49e4c01b044d60f6c80ea4ed6328b281
        with:
          name: s3-dist-path-${{ github.run_id }}.${{ github.run_attempt }}
      - name: Update Nightly Distro Downloads page
        if: ${{ input.build_type == 'snapshot' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TOOLS_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TOOLS_S3_SECRET_KEY  }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          dist_path=`cat s3-dist-path.txt`
          s3_url=s3://dist.springsource.com/${dist_path}
          eclipse_profile=${{ inputs.eclipse_profile }}
          eclipse_version=${eclipse_profile:0:2}.${eclipse_profile:2}
          downloads_html="sts4-nightly-${eclipse_version}.html"
          files=`aws s3 cp ${s3_url} . --recursive --exclude "*" --include "spring-tool-suite-4*.zip" --include "spring-tool-suite-4*.dmg" --include "spring-tool-suite-4*.self-extracting.jar" --include "spring-tool-suite-4*.tar.gz" --exclude "*/*" --dryrun`
          echo '<ul>' >> $downloads_html
          for file in $files
          do
            if [[ "$file" =~ ^"s3://dist." ]]; then
              download_url=https://download${file:9}
              filename=${file:${#s3_url}+1}
              echo '  <li><a href="'${download_url}'">'${filename}'</li>' >> $downloads_html  
            fi
          done
          echo '</ul>' >> $downloads_html
          cat ./$downloads_html
          aws s3 mv ./$downloads_html s3://dist.springsource.com/${{ input.build_type }}/STS4 --acl public-read --no-progress
